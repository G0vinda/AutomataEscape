//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/UIInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIInput"",
    ""maps"": [
        {
            ""name"": ""Input"",
            ""id"": ""938eaf69-95e0-45cb-95cf-b33ea68ed567"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""f1fd97e5-f859-48f0-bdee-3ca47478c7bd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PressRelease"",
                    ""type"": ""Button"",
                    ""id"": ""5ad6c6d9-896c-4100-b269-c1eb90f8b675"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PositionDelta"",
                    ""type"": ""Value"",
                    ""id"": ""f3d61140-e30c-4993-9d39-1fe028e4fbf9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""613f70f3-020b-4cc0-95d5-11fe97474a7f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""913c46c8-635c-4212-b245-5f6425a33315"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1704ec47-492b-4a5d-b1dd-ebb928f4b7b5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71870b36-71e1-4ae2-aa29-886403ee96e5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PositionDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36c596ef-899d-47aa-8591-67372b2b0a3f"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Input
        m_Input = asset.FindActionMap("Input", throwIfNotFound: true);
        m_Input_Position = m_Input.FindAction("Position", throwIfNotFound: true);
        m_Input_PressRelease = m_Input.FindAction("PressRelease", throwIfNotFound: true);
        m_Input_PositionDelta = m_Input.FindAction("PositionDelta", throwIfNotFound: true);
        m_Input_Zoom = m_Input.FindAction("Zoom", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Input
    private readonly InputActionMap m_Input;
    private IInputActions m_InputActionsCallbackInterface;
    private readonly InputAction m_Input_Position;
    private readonly InputAction m_Input_PressRelease;
    private readonly InputAction m_Input_PositionDelta;
    private readonly InputAction m_Input_Zoom;
    public struct InputActions
    {
        private @UIInput m_Wrapper;
        public InputActions(@UIInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_Input_Position;
        public InputAction @PressRelease => m_Wrapper.m_Input_PressRelease;
        public InputAction @PositionDelta => m_Wrapper.m_Input_PositionDelta;
        public InputAction @Zoom => m_Wrapper.m_Input_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActions set) { return set.Get(); }
        public void SetCallbacks(IInputActions instance)
        {
            if (m_Wrapper.m_InputActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_InputActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnPosition;
                @PressRelease.started -= m_Wrapper.m_InputActionsCallbackInterface.OnPressRelease;
                @PressRelease.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnPressRelease;
                @PressRelease.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnPressRelease;
                @PositionDelta.started -= m_Wrapper.m_InputActionsCallbackInterface.OnPositionDelta;
                @PositionDelta.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnPositionDelta;
                @PositionDelta.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnPositionDelta;
                @Zoom.started -= m_Wrapper.m_InputActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_InputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @PressRelease.started += instance.OnPressRelease;
                @PressRelease.performed += instance.OnPressRelease;
                @PressRelease.canceled += instance.OnPressRelease;
                @PositionDelta.started += instance.OnPositionDelta;
                @PositionDelta.performed += instance.OnPositionDelta;
                @PositionDelta.canceled += instance.OnPositionDelta;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }
        }
    }
    public InputActions @Input => new InputActions(this);
    public interface IInputActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnPressRelease(InputAction.CallbackContext context);
        void OnPositionDelta(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
}
